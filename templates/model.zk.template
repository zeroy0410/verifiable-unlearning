import "hashes/pedersen/512bitBool" as hash_bits;
import "hashes/pedersen/512bit" as hash;
import "utils/casts/field_to_u32";
import "utils/casts/bool_256_to_u32_8" as bool_to_u32;
import "hashes/utils/256bitsDirectionHelper" as multiplex;

import "utils/casts/u64_to_bits" as u64_to_bits;
import "utils/casts/u32_from_bits" as u32_from_bits;

const u32 NO_SAMPLES = {{no_samples}};
const u64 PRECISION = {{precision}};
const u32 EPOCHS = {{epochs}};
const u64 LR = {{lr}};
const u32 NO_FEATURES = {{no_features}};
const u32 NO_WEIGHTS = {{no_weights}};
const u32 NO_NEURONS = {{no_neurons}};

def is_equal(u32[8] a, u32[8] b) -> bool {
	return a[0] == b[0] && a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5] == b[5] && a[6] == b[6] && a[7] == b[7];
}
def hash_int(u64 x) -> u32[8] {
    u32[16] mut preimage = [0; 16];
    preimage[14] = u32_from_bits(u64_to_bits(x)[0..32]);
    preimage[15] = u32_from_bits(u64_to_bits(x)[32..64]);
    return hash(preimage);
}

def hash_digest(u32[8] lhs, u32[8] rhs) -> u32[8] {
    u32[16] preimage = [...lhs, ...rhs];
    return hash(preimage);
}

def hash_input(u64[NO_FEATURES] x, u64 y) -> u32[8] {
    u32[8] mut h = hash_int(y);
    for u32 j in 0..NO_FEATURES {
        u32[8] lhs = h;
        u32[8] mut rhs = [0; 8];
    	rhs[6] = u32_from_bits(u64_to_bits(x[j])[0..32]);
    	rhs[7] = u32_from_bits(u64_to_bits(x[j])[32..64]);	
        h = hash_digest(lhs, rhs);
    }
	return h;
}

def remove_shift(u64 input) -> u64 {
    return if u64_to_bits(input)[0] == true { -1* ((-1 * input) / PRECISION ) } else { input / PRECISION };
}

{%- if logistic_regression or neural_network %}
const u64 W0 = {{W0}};
const u64 W1 = {{W1}};
const u64 W3 = {{W3}};
def sigmoid(u64 x) -> u64 {
    return W0 + remove_shift(W1*x) - remove_shift(W3*remove_shift(remove_shift(x*x)*x));
}
{% endif %}

def main(public u32[8] verification_accumulator, public u32[8] h_m, private u64[NO_SAMPLES][NO_FEATURES] X, private u64[NO_SAMPLES] Y) {
    
    {%- if not skip_verification %}
    {%- for l in tree_generation.splitlines() %}
    {{l}}
    {%- endfor %}
    {% else %}
    assert(is_equal([0, 0, 0, 0, 0, 0, 0, 0], verification_accumulator));
    {% endif %}

    {{weights_init_str}}

    {%- if not skip_regression %}
    u64[NO_WEIGHTS] cache = [0; NO_WEIGHTS];

    for u32 epoch in 0..EPOCHS {
        for u32 sample_idx in 0..NO_SAMPLES {
            // init accumulator
            {%- if linear_regression or logistic_regression %}
            u64[NO_FEATURES] mut dw = [0; NO_FEATURES];
            u64 mut db = 0;
            {% endif %}
            {% if neural_network %}
            u64[NO_NEURONS] mut a_0 = [0; NO_NEURONS];
            u64 mut a_1 = 0;
            u64[NO_NEURONS] mut z_0 = [0; NO_NEURONS];
            u64 mut z_1 = 0;
            u64[NO_NEURONS] mut da_0 = [0; NO_NEURONS];
            u64[NO_NEURONS] mut dz_0 = [0; NO_NEURONS];
            u64 mut dz_1 = 0;
            {%- for j in range(no_neurons) %}
            u64[NO_FEATURES] mut dw_0_{{j}} = [0; NO_FEATURES];
            {%- endfor %}
            u64[NO_NEURONS] mut dw_1_0 = [0; NO_NEURONS];
            u64[NO_NEURONS] mut db_0 = [0; NO_NEURONS];
            u64 mut db_1 = 0;
            {% endif %}
            // get sample
            u64[NO_FEATURES] x = X[sample_idx];
            u64 y = Y[sample_idx];
            // forward
            {%- if neural_network %}
            {%- for j in range(no_neurons) %}
            // j-th neuron
            z_0[{{j}}] = b_0[{{j}}];
            for u32 i in 0..NO_FEATURES {
                z_0[{{j}}] = z_0[{{j}}] + remove_shift(x[i]*w_0_{{j}}[i]);
            }
            a_0[{{j}}] = sigmoid(z_0[{{j}}]);
            {%- endfor %}
            // layer 1
            z_1 = b_1;
            for u32 j in 0..NO_NEURONS {
                z_1 = z_1 + remove_shift(a_0[j]*w_1_0[j]);
            }
            a_1 = sigmoid(z_1);
            {% endif %}
            {%- if linear_regression or logistic_regression %}
            u64 mut y_pred = b;
            for u32 i in 0..NO_FEATURES {
                y_pred = y_pred + remove_shift(x[i]*w[i]);
            }
            {% endif %}
            {%- if logistic_regression %}
            y_pred = sigmoid(y_pred);
            {% endif %}
            // backward
            {%- if linear_regression or logistic_regression %}
            u64 dy_pred = y_pred - y;
            for u32 i in 0..NO_FEATURES {
                dw[i] = dw[i] + remove_shift(x[i]*dy_pred);
            }
            db = db + dy_pred;
            {% endif %}
            {%- if neural_network %}
            // layer 1
            dz_1 = a_1 - y;
            for u32 i in 0..NO_NEURONS {
                dw_1_0[i] = dw_1_0[i] + remove_shift(dz_1*a_0[i]);
            }
            db_1 = db_1 + dz_1;
            // layer 0 
            for u32 j in 0..NO_NEURONS {
                da_0[j] = remove_shift(dz_1*w_1_0[j]);
            }
            for u32 j in 0..NO_NEURONS {
                dz_0[j] = remove_shift(da_0[j]*remove_shift(a_0[j]*(1-a_0[j])));
            }
            {%- for j in range(no_neurons) %}
                for u32 i in 0..NO_FEATURES {
                    dw_0_{{j}}[i] = dw_0_{{j}}[i] + remove_shift(dz_0[{{j}}] * x[i]);
                }
            db_0[{{j}}] = db_0[{{j}}] + dz_0[{{j}}];
            {% endfor %}
            {% endif %}
            // update
            {%- if linear_regression or logistic_regression %}
            for u32 i in 0..NO_FEATURES {
                w[i] = w[i] - remove_shift(LR * dw[i]);
            }
            b = b - remove_shift(LR * db);
            {% endif %}
            {%- if neural_network %}
            for u32 i in 0..NO_NEURONS {
                w_1_0[i] = w_1_0[i] - remove_shift(LR*dw_1_0[i]);
            }
            b_1 = b_1 - remove_shift(LR*db_1);

            {%- for j in range(no_neurons) %}    
            for u32 i in 0..NO_FEATURES {
                w_0_{{j}}[i] = w_0_{{j}}[i] - remove_shift(LR*dw_0_{{j}}[i]);
            }
            b_0[{{j}}] = b_0[{{j}}] - remove_shift(LR*db_0[{{j}}]);
            {% endfor %}
            {% endif %}
        }
    }

    {%- if neural_network %}
    u64[NO_WEIGHTS] model = [
    {%- for j in range(no_neurons) -%}
        {{" "}}...w_0_{{j}},
    {%- endfor -%}
    ...b_0, ...w_1_0, b_1];
    {% endif %}
    {%- if linear_regression or logistic_regression %}
    u64[NO_WEIGHTS] model = [...w, b];
    {% endif %}

    u32[8] mut h_m_prime = hash_int(model[0]);
    for u32 i in 1..NO_WEIGHTS {
        h_m_prime = hash_digest(h_m_prime, hash_int(model[i]));
    }
    assert(is_equal(h_m, h_m_prime));
    {% endif %}

}